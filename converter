#!/usr/bin/env bash

#########################################################
#                                                       #
#  Program that converts an image into a smaller image  #
#  with the largest dimension within a certain range    #
#                                                       #
#########################################################
# Version 0.2 Nov 2017					#
#########################################################

# Include options parsing
. $HOME/.bin/options.bash


# Add options
addOption -t --target help="Target size for the largest dimension. Default = 1000" default="1000" dest=targetSize
addOption -d --dest help="Destination of the output images. Default = ./scaled" default="./scaled" dest=destFile
addOption -c --convert help="Convert pictures. Required flag for conversion." flagTrue
addOption -m --move  help="Move converted images to select folders for webifying" flagTrue
addOption --file-create dontShow help="Create folders for webifying"
addOption -v --version help="Show version information" flagTrue
addOption -s --scale dontShow help="Manually set starting scale to speed up conversion" default="20" dest=scale

setUsage "Converter Script for converting pictures to a maximum largest dimension set by the user.
Copyright: Copyright (C) 2017 John W Rogers

usage: `basename $0` [OPTIONS...]  PICTURES

Options:\n"

parseOptions "$@"



####################
# Helper Functions #
####################

kill_child_processes() {
	# Cleanup of daughter processes
	echo
	echo "Exiting: Killing Children"
	echo
	isTopmost=$1
	curPid=$2
	childPids=`ps -o pid --no-headers --ppid ${curPid}`
	for childPid in $childPids
	do
		kill_child_processes 0 $childPid
	done
	if [ $isTopmost -eq 0 ]; then
		kill -9 $curPid 2> /dev/null
	fi
}

# Ctrl-C trap.
trap "kill_child_processes 1 $$; exit 0" SIGHUP SIGINT SIGTERM

folderChecker(){
	# Check if Folder  doesn't exist
	if [ ! -d $destFile ]; then
		# create the folder
		mkdir ./$destFile
	fi
}
alreadyConverted(){
	# INPUT: Directory File
	# check if inputted file exists at inputted directory
	if [ -f $2 ]; then
		#echo "true"
		echo 0
	else
		#echo "false"
		echo 1
	fi
}

##############################
# Convert images to web size #
##############################

converter() {
	# Function to convert image

	# Variables
	local img=$1
	local iter=0
	local iNum=${img//[^0-9]/}
	local tmp=".tmp-"$iNum".jpg"
	local outPrefix="$destFile/sc-"
	local outFile=$iNum".jpg"
	local w1=
	local w2=
	local dim=
	local upper=$(($targetSize+30))
	local lower=$(($targetSize-30))

	echo "converting images">&2

	# Check if destFile Exists
	folderChecker

	if  [ $(alreadyConverted $destFile $outPrefix$outFile) -eq 1 ] ; then
		convert $img -scale $scale% $tmp
		while [ "$iter" -lt "20" ]
		do
			w1=$(identify -ping -format '%w %h\n' $tmp | cut -d' ' -f1)
			w2=$(identify -ping -format '%w %h\n' $tmp | cut -d' ' -f2)
			if [ "$w1" -lt "$w2" ];
			then
				dim=$w2
			else
				dim=$w1
			fi

			if [ "$dim" -lt "$upper" ] && [ "$dim" -gt "$lower" ];
			then
				break
			fi

			if [ "$dim" -lt "$targetSize" ];
			then
				((scale++))
			else
				((scale--))
			fi
			echo $scale
			convert $img -scale $scale% $tmp
			
			(( iter++ ))
		done

		echo "image $img converted">&2
		mv $tmp $outPrefix$outFile
	else
		echo "file already exists, not converted"
	fi


}

########################################
# Copy images to folders for webifying #
########################################

copy_images() {

	# Function to copy images into subfolders for webify-ing
	local dirArray=(blackBarFrameCredit blackFineArt blackFineArtCredit creditStrip SemiTransparent whiteFineArtCredit)
	local img=$1
	# if directories don't exist, create them
	for dir in "${dirArray[@]}";do
		if [[ ! -d $dir ]];then
			mkdir $dir
		fi
	done

	echo "copying image: $img">&2


	# copy images into folders
	for dir in "${dirArray[@]}";do
		#echo $dir ^^ $img
		cp $img $dir/$img
	done

}

#################
# Webify Images #
#################
webifyIMG(){
	local img=$1
	

}

#################
# Main Function #
#################
if $convert;
then
	for im in "${optArgv[@]}";do
		converter $im
	done
elif $move;
then
	for im in "${optArgv[@]}";do
		echo $im
		copy_images $im
	done;
elif $version; then
	echo "Converter Script Version: 0.2 Nov 2017"
else
	echo "ERROR: Must specify convert or move";
fi
